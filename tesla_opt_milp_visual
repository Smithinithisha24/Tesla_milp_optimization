{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "752a86ec-beeb-4051-a2d7-7e1bc6537c6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GLPSOL--GLPK LP/MIP Solver 5.0\n",
      "Parameter(s) specified in the command line:\n",
      " --write C:\\Users\\STUTHI~1\\AppData\\Local\\Temp\\tmp8ompy1o7.glpk.raw --wglp\n",
      " C:\\Users\\STUTHI~1\\AppData\\Local\\Temp\\tmpq2ikd617.glpk.glp --cpxlp C:\\Users\\STUTHI~1\\AppData\\Local\\Temp\\tmp8afe9368.pyomo.lp\n",
      "Reading problem data from 'C:\\Users\\STUTHI~1\\AppData\\Local\\Temp\\tmp8afe9368.pyomo.lp'...\n",
      "C:\\Users\\STUTHI~1\\AppData\\Local\\Temp\\tmp8afe9368.pyomo.lp:151: warning: lower bound of variable 'x14' redefined\n",
      "C:\\Users\\STUTHI~1\\AppData\\Local\\Temp\\tmp8afe9368.pyomo.lp:151: warning: upper bound of variable 'x14' redefined\n",
      "14 rows, 24 columns, 51 non-zeros\n",
      "3 integer variables, all of which are binary\n",
      "154 lines were read\n",
      "Writing problem data to 'C:\\Users\\STUTHI~1\\AppData\\Local\\Temp\\tmpq2ikd617.glpk.glp'...\n",
      "148 lines were written\n",
      "GLPK Integer Optimizer 5.0\n",
      "14 rows, 24 columns, 51 non-zeros\n",
      "3 integer variables, all of which are binary\n",
      "Preprocessing...\n",
      "14 rows, 21 columns, 48 non-zeros\n",
      "3 integer variables, all of which are binary\n",
      "Scaling...\n",
      " A: min|aij| =  1.000e+00  max|aij| =  1.200e+05  ratio =  1.200e+05\n",
      "GM: min|aij| =  9.264e-01  max|aij| =  1.079e+00  ratio =  1.165e+00\n",
      "EQ: min|aij| =  8.837e-01  max|aij| =  1.000e+00  ratio =  1.132e+00\n",
      "2N: min|aij| =  5.000e-01  max|aij| =  1.172e+00  ratio =  2.344e+00\n",
      "Constructing initial basis...\n",
      "Size of triangular part is 14\n",
      "Solving LP relaxation...\n",
      "GLPK Simplex Optimizer 5.0\n",
      "14 rows, 21 columns, 48 non-zeros\n",
      "      0: obj =   0.000000000e+00 inf =   3.200e+06 (2)\n",
      "     11: obj =   7.775333333e+06 inf =   1.987e-10 (0)\n",
      "*    18: obj =   6.365000000e+06 inf =   0.000e+00 (0)\n",
      "OPTIMAL LP SOLUTION FOUND\n",
      "Integer optimization begins...\n",
      "Long-step dual simplex will be used\n",
      "+    18: mip =     not found yet >=              -inf        (1; 0)\n",
      "+    21: >>>>>   6.628000000e+06 >=   6.452000000e+06   2.7% (3; 0)\n",
      "+    23: mip =   6.628000000e+06 >=     tree is empty   0.0% (0; 5)\n",
      "INTEGER OPTIMAL SOLUTION FOUND\n",
      "Time used:   0.0 secs\n",
      "Memory used: 0.1 Mb (73595 bytes)\n",
      "Writing MIP solution to 'C:\\Users\\STUTHI~1\\AppData\\Local\\Temp\\tmp8ompy1o7.glpk.raw'...\n",
      "47 lines were written\n",
      "\n",
      "Plant Status:\n",
      "Giga_Nevada: Open\n",
      "Giga_Berlin: Closed\n",
      "Giga_Texas: Open\n",
      "\n",
      "Material Flow (Supplier → Plant):\n",
      "Chile_Lithium → Giga_Nevada: 90000.00 units\n",
      "Indonesia_Nickel → Giga_Texas: 110000.00 units\n",
      "\n",
      "Product Flow (Plant → Customer):\n",
      "Giga_Nevada → Fremont: 90000.00 units\n",
      "Giga_Texas → Shanghai: 110000.00 units\n",
      "\n",
      "Energy Use per Plant:\n",
      "Giga_Nevada, Time 1: 13500000.00 kWh\n",
      "Giga_Texas, Time 1: 17600000.00 kWh\n"
     ]
    }
   ],
   "source": [
    "from pyomo.environ import *\n",
    "\n",
    "# Create the model\n",
    "model = ConcreteModel()\n",
    "\n",
    "# Sets\n",
    "model.S = Set(initialize=['Chile_Lithium', 'Indonesia_Nickel'])  # Suppliers\n",
    "model.P = Set(initialize=['Giga_Nevada', 'Giga_Berlin', 'Giga_Texas'])  # Plants\n",
    "model.C = Set(initialize=['Fremont', 'Shanghai'])  # Customers\n",
    "model.T = Set(initialize=[1, 2, 3])  # Time slots\n",
    "\n",
    "# Parameters\n",
    "model.demand = Param(model.C, initialize={'Fremont': 90000, 'Shanghai': 110000})\n",
    "model.capacity = Param(model.P, initialize={'Giga_Nevada': 100000, 'Giga_Berlin': 80000, 'Giga_Texas': 120000})\n",
    "model.fixed_cost = Param(model.P, initialize={'Giga_Nevada': 1000000, 'Giga_Berlin': 950000, 'Giga_Texas': 1100000})\n",
    "model.energy_usage = Param(model.P, initialize={'Giga_Nevada': 150, 'Giga_Berlin': 140, 'Giga_Texas': 160})\n",
    "model.energy_cap = Param(model.P, initialize={'Giga_Nevada': 1.5e7, 'Giga_Berlin': 1.2e7, 'Giga_Texas': 1.8e7})\n",
    "model.energy_price = Param(model.T, initialize={1: 0.08, 2: 0.10, 3: 0.12})\n",
    "model.trans_sp = Param(model.S, model.P, initialize={\n",
    "    ('Chile_Lithium', 'Giga_Nevada'): 5,\n",
    "    ('Chile_Lithium', 'Giga_Berlin'): 12,\n",
    "    ('Chile_Lithium', 'Giga_Texas'): 6,\n",
    "    ('Indonesia_Nickel', 'Giga_Nevada'): 7,\n",
    "    ('Indonesia_Nickel', 'Giga_Berlin'): 4,\n",
    "    ('Indonesia_Nickel', 'Giga_Texas'): 5,\n",
    "})\n",
    "model.trans_pc = Param(model.P, model.C, initialize={\n",
    "    ('Giga_Nevada', 'Fremont'): 3,\n",
    "    ('Giga_Nevada', 'Shanghai'): 8,\n",
    "    ('Giga_Berlin', 'Fremont'): 10,\n",
    "    ('Giga_Berlin', 'Shanghai'): 6,\n",
    "    ('Giga_Texas', 'Fremont'): 4,\n",
    "    ('Giga_Texas', 'Shanghai'): 7,\n",
    "})\n",
    "\n",
    "# Variables\n",
    "model.x = Var(model.S, model.P, domain=NonNegativeReals)  # raw material flow\n",
    "model.y = Var(model.P, model.C, domain=NonNegativeReals)  # battery pack flow\n",
    "model.open_p = Var(model.P, domain=Binary)  # plant operational decision\n",
    "model.energy_used = Var(model.P, model.T, domain=NonNegativeReals)  # energy per plant per time\n",
    "\n",
    "# Objective\n",
    "def total_cost(model):\n",
    "    transport_cost = sum(model.trans_sp[s, p] * model.x[s, p] for s in model.S for p in model.P)\n",
    "    transport_cost += sum(model.trans_pc[p, c] * model.y[p, c] for p in model.P for c in model.C)\n",
    "    fixed_cost = sum(model.fixed_cost[p] * model.open_p[p] for p in model.P)\n",
    "    energy_cost = sum(model.energy_used[p, t] * model.energy_price[t] for p in model.P for t in model.T)\n",
    "    return transport_cost + fixed_cost + energy_cost\n",
    "\n",
    "model.obj = Objective(rule=total_cost, sense=minimize)\n",
    "\n",
    "# Constraints\n",
    "\n",
    "# 1. Meet demand\n",
    "def demand_rule(model, c):\n",
    "    return sum(model.y[p, c] for p in model.P) >= model.demand[c]\n",
    "model.demand_con = Constraint(model.C, rule=demand_rule)\n",
    "\n",
    "# 2. Do not exceed plant capacity\n",
    "def capacity_rule(model, p):\n",
    "    return sum(model.y[p, c] for c in model.C) <= model.capacity[p] * model.open_p[p]\n",
    "model.capacity_con = Constraint(model.P, rule=capacity_rule)\n",
    "\n",
    "# 3. Balance raw materials in = products out\n",
    "def balance_rule(model, p):\n",
    "    return sum(model.x[s, p] for s in model.S) == sum(model.y[p, c] for c in model.C)\n",
    "model.balance_con = Constraint(model.P, rule=balance_rule)\n",
    "\n",
    "# 4. Energy cap\n",
    "def energy_cap_rule(model, p):\n",
    "    return sum(model.energy_used[p, t] for t in model.T) <= model.energy_cap[p]\n",
    "model.energy_cap_con = Constraint(model.P, rule=energy_cap_rule)\n",
    "\n",
    "# 5. Ensure enough energy to produce all units\n",
    "def energy_use_link(model, p):\n",
    "    return sum(model.energy_used[p, t] for t in model.T) >= model.energy_usage[p] * sum(model.y[p, c] for c in model.C)\n",
    "model.energy_use_con = Constraint(model.P, rule=energy_use_link)\n",
    "\n",
    "# Solve\n",
    "solver = SolverFactory('glpk')  # Ensure GLPK is installed\n",
    "results = solver.solve(model, tee=True)\n",
    "\n",
    "# Print solution\n",
    "print(\"\\nPlant Status:\")\n",
    "for p in model.P:\n",
    "    print(f\"{p}: {'Open' if model.open_p[p]() > 0.5 else 'Closed'}\")\n",
    "\n",
    "print(\"\\nMaterial Flow (Supplier → Plant):\")\n",
    "for s in model.S:\n",
    "    for p in model.P:\n",
    "        val = model.x[s, p]()\n",
    "        if val > 0:\n",
    "            print(f\"{s} → {p}: {val:.2f} units\")\n",
    "\n",
    "print(\"\\nProduct Flow (Plant → Customer):\")\n",
    "for p in model.P:\n",
    "    for c in model.C:\n",
    "        val = model.y[p, c]()\n",
    "        if val > 0:\n",
    "            print(f\"{p} → {c}: {val:.2f} units\")\n",
    "\n",
    "print(\"\\nEnergy Use per Plant:\")\n",
    "for p in model.P:\n",
    "    for t in model.T:\n",
    "        val = model.energy_used[p, t]()\n",
    "        if val > 0:\n",
    "            print(f\"{p}, Time {t}: {val:.2f} kWh\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6bb6cc2c-56f7-4432-b5f7-c9ef0e2d0081",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Tesla MILP Model Visualization in Jupyter Notebook\n",
    "\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from pyomo.environ import *\n",
    "from pyomo.opt import SolverFactory\n",
    "\n",
    "# 1. Define the model\n",
    "model = ConcreteModel()\n",
    "model.S = Set(initialize=['Chile_Lithium', 'Indonesia_Nickel'])\n",
    "model.P = Set(initialize=['Giga_Nevada', 'Giga_Berlin', 'Giga_Texas'])\n",
    "model.C = Set(initialize=['Fremont', 'Shanghai'])\n",
    "model.T = Set(initialize=[1, 2, 3])\n",
    "\n",
    "model.demand = Param(model.C, initialize={'Fremont': 90000, 'Shanghai': 110000})\n",
    "model.capacity = Param(model.P, initialize={'Giga_Nevada': 100000, 'Giga_Berlin': 80000, 'Giga_Texas': 120000})\n",
    "model.fixed_cost = Param(model.P, initialize={'Giga_Nevada': 1000000, 'Giga_Berlin': 950000, 'Giga_Texas': 1100000})\n",
    "model.energy_usage = Param(model.P, initialize={'Giga_Nevada': 150, 'Giga_Berlin': 140, 'Giga_Texas': 160})\n",
    "model.energy_cap = Param(model.P, initialize={'Giga_Nevada': 1.5e7, 'Giga_Berlin': 1.2e7, 'Giga_Texas': 1.8e7})\n",
    "model.energy_price = Param(model.T, initialize={1: 0.08, 2: 0.10, 3: 0.12})\n",
    "model.trans_sp = Param(model.S, model.P, initialize={\n",
    "    ('Chile_Lithium', 'Giga_Nevada'): 5, ('Chile_Lithium', 'Giga_Berlin'): 12, ('Chile_Lithium', 'Giga_Texas'): 6,\n",
    "    ('Indonesia_Nickel', 'Giga_Nevada'): 7, ('Indonesia_Nickel', 'Giga_Berlin'): 4, ('Indonesia_Nickel', 'Giga_Texas'): 5\n",
    "})\n",
    "model.trans_pc = Param(model.P, model.C, initialize={\n",
    "    ('Giga_Nevada', 'Fremont'): 3, ('Giga_Nevada', 'Shanghai'): 8,\n",
    "    ('Giga_Berlin', 'Fremont'): 10, ('Giga_Berlin', 'Shanghai'): 6,\n",
    "    ('Giga_Texas', 'Fremont'): 4, ('Giga_Texas', 'Shanghai'): 7\n",
    "})\n",
    "\n",
    "model.x = Var(model.S, model.P, domain=NonNegativeReals)\n",
    "model.y = Var(model.P, model.C, domain=NonNegativeReals)\n",
    "model.open_p = Var(model.P, domain=Binary)\n",
    "model.energy_used = Var(model.P, model.T, domain=NonNegativeReals)\n",
    "\n",
    "model.obj = Objective(expr=\n",
    "    sum(model.trans_sp[s, p] * model.x[s, p] for s in model.S for p in model.P) +\n",
    "    sum(model.trans_pc[p, c] * model.y[p, c] for p in model.P for c in model.C) +\n",
    "    sum(model.fixed_cost[p] * model.open_p[p] for p in model.P) +\n",
    "    sum(model.energy_used[p, t] * model.energy_price[t] for p in model.P for t in model.T),\n",
    "    sense=minimize)\n",
    "\n",
    "model.demand_con = Constraint(model.C, rule=lambda m, c: sum(m.y[p, c] for p in m.P) >= m.demand[c])\n",
    "model.capacity_con = Constraint(model.P, rule=lambda m, p: sum(m.y[p, c] for c in m.C) <= m.capacity[p] * m.open_p[p])\n",
    "model.balance_con = Constraint(model.P, rule=lambda m, p: sum(m.x[s, p] for s in m.S) == sum(m.y[p, c] for c in m.C))\n",
    "model.energy_cap_con = Constraint(model.P, rule=lambda m, p: sum(m.energy_used[p, t] for t in m.T) <= m.energy_cap[p])\n",
    "model.energy_use_con = Constraint(model.P, rule=lambda m, p: sum(m.energy_used[p, t] for t in m.T) >= m.energy_usage[p] * sum(m.y[p, c] for c in m.C))\n",
    "\n",
    "solver = SolverFactory('glpk')\n",
    "solver.solve(model)\n",
    "\n",
    "# 2. Collect Results\n",
    "df_energy = pd.DataFrame([\n",
    "    {\"Plant\": p, \"Time\": t, \"Energy_kWh\": model.energy_used[p, t]()} \n",
    "    for p in model.P for t in model.T if model.energy_used[p, t]() > 0\n",
    "])\n",
    "df_product = pd.DataFrame([\n",
    "    {\"Plant\": p, \"Customer\": c, \"Units\": model.y[p, c]()} \n",
    "    for p in model.P for c in model.C if model.y[p, c]() > 0\n",
    "])\n",
    "df_status = pd.DataFrame({\n",
    "    \"Plant\": list(model.P),\n",
    "    \"Status\": ['Open' if model.open_p[p]() > 0.5 else 'Closed' for p in model.P]\n",
    "})\n",
    "df_status['Status_Code'] = df_status['Status'].map({'Open': 1, 'Closed': 0})\n",
    "\n",
    "# 3. Visualizations\n",
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "# Plant Status\n",
    "plt.figure(figsize=(6, 3))\n",
    "sns.barplot(data=df_status, x=\"Plant\", y=\"Status_Code\")\n",
    "plt.title(\"Plant Operational Status (1=Open, 0=Closed)\")\n",
    "plt.ylabel(\"Operational\")\n",
    "plt.ylim(0, 1.2)\n",
    "plt.show()\n",
    "\n",
    "# Product Flow\n",
    "plt.figure(figsize=(8, 4))\n",
    "sns.barplot(data=df_product, x=\"Plant\", y=\"Units\", hue=\"Customer\")\n",
    "plt.title(\"Battery Flow from Plant to Customer\")\n",
    "plt.ylabel(\"Units Produced\")\n",
    "plt.show()\n",
    "\n",
    "# Energy Use\n",
    "df_energy[\"Time\"] = df_energy[\"Time\"].astype(str)\n",
    "plt.figure(figsize=(8, 4))\n",
    "sns.barplot(data=df_energy, x=\"Plant\", y=\"Energy_kWh\", hue=\"Time\")\n",
    "plt.title(\"Energy Use by Time Slot\")\n",
    "plt.ylabel(\"Energy (kWh)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "673a3989-eeaa-4711-9c8f-11f070247c00",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
